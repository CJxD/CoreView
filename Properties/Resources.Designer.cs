//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.261
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CoreView.Properties {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("CoreView.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        internal static System.Drawing.Bitmap Address {
            get {
                object obj = ResourceManager.GetObject("Address", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
        ///&lt;configuration&gt;
        ///	&lt;general&gt;
        ///		&lt;option name=&quot;LoadWMIAtStart&quot;&gt;True&lt;/option&gt;
        ///		&lt;option name=&quot;LoadHardwareAtStart&quot;&gt;False&lt;/option&gt;
        ///		&lt;option name=&quot;OnlyErrorLogs&quot;&gt;True&lt;/option&gt;
        ///		&lt;option name=&quot;LogAgeMax&quot;&gt;14&lt;/option&gt;
        ///		&lt;option name=&quot;ShowSplash&quot;&gt;True&lt;/option&gt;
        ///	&lt;/general&gt;
        ///	&lt;standardweights&gt;
        ///		&lt;Processor&gt;
        ///			&lt;weight name=&quot;Architecture&quot;&gt;0.4&lt;/weight&gt;
        ///			&lt;weight name=&quot;Availability&quot;&gt;0.7&lt;/weight&gt;
        ///			&lt;weight name=&quot;CacheL2&quot;&gt;0.2&lt;/weight&gt;
        ///			&lt;weight name=&quot;CacheL3&quot;&gt;0.2&lt;/weigh [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string config_default {
            get {
                return ResourceManager.GetString("config_default", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to GNU GENERAL PUBLIC LICENSE
        ///                       Version 3, 29 June 2007
        ///
        /// Copyright (C) 2007 Free Software Foundation, Inc. &lt;http://fsf.org/&gt;
        /// Everyone is permitted to copy and distribute verbatim copies
        /// of this license document, but changing it is not allowed.
        ///
        ///                            Preamble
        ///
        ///  The GNU General Public License is a free, copyleft license for
        ///software and other kinds of works.
        ///
        ///  The licenses for most software and other practical works are designed
        ///to take away your free [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string cv_gpl {
            get {
                return ResourceManager.GetString("cv_gpl", resourceCulture);
            }
        }
        
        internal static System.Drawing.Bitmap Database {
            get {
                object obj = ResourceManager.GetObject("Database", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        internal static System.Drawing.Bitmap Driver {
            get {
                object obj = ResourceManager.GetObject("Driver", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        internal static System.Drawing.Bitmap Error {
            get {
                object obj = ResourceManager.GetObject("Error", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        internal static System.Drawing.Bitmap Graphics {
            get {
                object obj = ResourceManager.GetObject("Graphics", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        internal static System.Drawing.Bitmap HardDrive {
            get {
                object obj = ResourceManager.GetObject("HardDrive", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to THE WORK (AS DEFINED BELOW) IS PROVIDED UNDER THE TERMS OF THIS CREATIVE COMMONS PUBLIC LICENSE (&quot;CCPL&quot; OR &quot;LICENSE&quot;). THE WORK IS PROTECTED BY COPYRIGHT AND/OR OTHER APPLICABLE LAW. ANY USE OF THE WORK OTHER THAN AS AUTHORIZED UNDER THIS LICENSE OR COPYRIGHT LAW IS PROHIBITED.
        ///
        ///BY EXERCISING ANY RIGHTS TO THE WORK PROVIDED HERE, YOU ACCEPT AND AGREE TO BE BOUND BY THE TERMS OF THIS LICENSE. TO THE EXTENT THIS LICENSE MAY BE CONSIDERED TO BE A CONTRACT, THE LICENSOR GRANTS YOU THE RIGHTS CONTAINED HERE IN [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string images_gpl {
            get {
                return ResourceManager.GetString("images_gpl", resourceCulture);
            }
        }
        
        internal static System.Drawing.Bitmap IRQ {
            get {
                object obj = ResourceManager.GetObject("IRQ", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        internal static byte[] lib_hardware_monitor {
            get {
                object obj = ResourceManager.GetObject("lib_hardware_monitor", resourceCulture);
                return ((byte[])(obj));
            }
        }
        
        internal static byte[] lib_sqlite_x64 {
            get {
                object obj = ResourceManager.GetObject("lib_sqlite_x64", resourceCulture);
                return ((byte[])(obj));
            }
        }
        
        internal static byte[] lib_sqlite_x86 {
            get {
                object obj = ResourceManager.GetObject("lib_sqlite_x86", resourceCulture);
                return ((byte[])(obj));
            }
        }
        
        internal static System.Drawing.Bitmap Log {
            get {
                object obj = ResourceManager.GetObject("Log", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        internal static System.Drawing.Icon Logo {
            get {
                object obj = ResourceManager.GetObject("Logo", resourceCulture);
                return ((System.Drawing.Icon)(obj));
            }
        }
        
        internal static byte[] Manual {
            get {
                object obj = ResourceManager.GetObject("Manual", resourceCulture);
                return ((byte[])(obj));
            }
        }
        
        internal static System.Drawing.Bitmap Memory {
            get {
                object obj = ResourceManager.GetObject("Memory", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        internal static System.Drawing.Bitmap Motherboard {
            get {
                object obj = ResourceManager.GetObject("Motherboard", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        internal static System.Drawing.Bitmap Network {
            get {
                object obj = ResourceManager.GetObject("Network", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to MOZILLA PUBLIC LICENSE
        ///                                Version 1.1
        ///
        ///                              ---------------
        ///
        ///1. Definitions.
        ///
        ///     1.0.1. &quot;Commercial Use&quot; means distribution or otherwise making the
        ///     Covered Code available to a third party.
        ///
        ///     1.1. &quot;Contributor&quot; means each entity that creates or contributes to
        ///     the creation of Modifications.
        ///
        ///     1.2. &quot;Contributor Version&quot; means the combination of the Original
        ///     Code, prior Modifications used by a Contributor, and the Modif [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string ohm_gpl {
            get {
                return ResourceManager.GetString("ohm_gpl", resourceCulture);
            }
        }
        
        internal static System.Drawing.Bitmap Optical {
            get {
                object obj = ResourceManager.GetObject("Optical", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        internal static System.Drawing.Bitmap PCI {
            get {
                object obj = ResourceManager.GetObject("PCI", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        internal static System.Drawing.Bitmap Process {
            get {
                object obj = ResourceManager.GetObject("Process", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        internal static System.Drawing.Bitmap Processor {
            get {
                object obj = ResourceManager.GetObject("Processor", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        internal static System.Drawing.Bitmap Sharing {
            get {
                object obj = ResourceManager.GetObject("Sharing", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        internal static System.Drawing.Bitmap Software {
            get {
                object obj = ResourceManager.GetObject("Software", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        internal static System.Drawing.Bitmap Splash {
            get {
                object obj = ResourceManager.GetObject("Splash", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        internal static System.Drawing.Bitmap StatBad {
            get {
                object obj = ResourceManager.GetObject("StatBad", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        internal static System.Drawing.Bitmap StatGood {
            get {
                object obj = ResourceManager.GetObject("StatGood", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        internal static System.Drawing.Bitmap StatWarn {
            get {
                object obj = ResourceManager.GetObject("StatWarn", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        internal static System.Drawing.Bitmap Text_Logo {
            get {
                object obj = ResourceManager.GetObject("Text_Logo", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        internal static System.Drawing.Bitmap USB {
            get {
                object obj = ResourceManager.GetObject("USB", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        internal static System.Drawing.Bitmap windows_logo {
            get {
                object obj = ResourceManager.GetObject("windows_logo", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Copyright (c) 2007-2009 OpenLibSys.org. All rights reserved.
        ///
        ///Redistribution and use in source and binary forms, with or without
        ///modification, are permitted provided that the following conditions
        ///are met:
        ///1. Redistributions of source code must retain the above copyright
        ///   notice, this list of conditions and the following disclaimer.
        ///2. Redistributions in binary form must reproduce the above copyright
        ///   notice, this list of conditions and the following disclaimer in the
        ///   documentation and/or oth [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string winring_gpl {
            get {
                return ResourceManager.GetString("winring_gpl", resourceCulture);
            }
        }
    }
}

<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="error_icon.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>